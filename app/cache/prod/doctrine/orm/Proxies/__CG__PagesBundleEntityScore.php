<?php

namespace Proxies\__CG__\PagesBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Score extends \PagesBundle\Entity\Score implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'id', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'problem', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'k', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'l', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'r', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'n', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'g', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'b', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 's', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'rn', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'rg', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'rb', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'nb', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'ng', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'gb', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'file_name');
        }

        return array('__isInitialized__', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'id', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'problem', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'k', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'l', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'r', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'n', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'g', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'b', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 's', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'rn', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'rg', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'rb', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'nb', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'ng', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'gb', '' . "\0" . 'PagesBundle\\Entity\\Score' . "\0" . 'file_name');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Score $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setProblem($problem)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProblem', array($problem));

        return parent::setProblem($problem);
    }

    /**
     * {@inheritDoc}
     */
    public function getProblem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProblem', array());

        return parent::getProblem();
    }

    /**
     * {@inheritDoc}
     */
    public function setK($k)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setK', array($k));

        return parent::setK($k);
    }

    /**
     * {@inheritDoc}
     */
    public function getK()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getK', array());

        return parent::getK();
    }

    /**
     * {@inheritDoc}
     */
    public function setL($l)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setL', array($l));

        return parent::setL($l);
    }

    /**
     * {@inheritDoc}
     */
    public function getL()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getL', array());

        return parent::getL();
    }

    /**
     * {@inheritDoc}
     */
    public function setR($r)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setR', array($r));

        return parent::setR($r);
    }

    /**
     * {@inheritDoc}
     */
    public function getR()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getR', array());

        return parent::getR();
    }

    /**
     * {@inheritDoc}
     */
    public function setN($n)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setN', array($n));

        return parent::setN($n);
    }

    /**
     * {@inheritDoc}
     */
    public function getN()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getN', array());

        return parent::getN();
    }

    /**
     * {@inheritDoc}
     */
    public function setG($g)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setG', array($g));

        return parent::setG($g);
    }

    /**
     * {@inheritDoc}
     */
    public function getG()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getG', array());

        return parent::getG();
    }

    /**
     * {@inheritDoc}
     */
    public function setB($b)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setB', array($b));

        return parent::setB($b);
    }

    /**
     * {@inheritDoc}
     */
    public function getB()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getB', array());

        return parent::getB();
    }

    /**
     * {@inheritDoc}
     */
    public function setS($s)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setS', array($s));

        return parent::setS($s);
    }

    /**
     * {@inheritDoc}
     */
    public function getS()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getS', array());

        return parent::getS();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileName($fileName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileName', array($fileName));

        return parent::setFileName($fileName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileName', array());

        return parent::getFileName();
    }

    /**
     * {@inheritDoc}
     */
    public function setRn($rn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRn', array($rn));

        return parent::setRn($rn);
    }

    /**
     * {@inheritDoc}
     */
    public function getRn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRn', array());

        return parent::getRn();
    }

    /**
     * {@inheritDoc}
     */
    public function setRg($rg)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRg', array($rg));

        return parent::setRg($rg);
    }

    /**
     * {@inheritDoc}
     */
    public function getRg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRg', array());

        return parent::getRg();
    }

    /**
     * {@inheritDoc}
     */
    public function setRb($rb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRb', array($rb));

        return parent::setRb($rb);
    }

    /**
     * {@inheritDoc}
     */
    public function getRb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRb', array());

        return parent::getRb();
    }

    /**
     * {@inheritDoc}
     */
    public function setNb($nb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNb', array($nb));

        return parent::setNb($nb);
    }

    /**
     * {@inheritDoc}
     */
    public function getNb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNb', array());

        return parent::getNb();
    }

    /**
     * {@inheritDoc}
     */
    public function setNg($ng)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNg', array($ng));

        return parent::setNg($ng);
    }

    /**
     * {@inheritDoc}
     */
    public function getNg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNg', array());

        return parent::getNg();
    }

    /**
     * {@inheritDoc}
     */
    public function setGb($gb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGb', array($gb));

        return parent::setGb($gb);
    }

    /**
     * {@inheritDoc}
     */
    public function getGb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGb', array());

        return parent::getGb();
    }

}
